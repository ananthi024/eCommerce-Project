

package com.classmiss.ClassyMissyFrontend.controller;



import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.classmiss.ClassyMissyBackend.dao.ProductDAO;
import com.classmiss.ClassyMissyBackend.dao.UserDetailsDAO;
import com.classmiss.ClassyMissyBackend.model.Cart;
import com.classmiss.ClassyMissyBackend.model.Product;
import com.classmiss.ClassyMissyBackend.model.Supplier;
import com.classmiss.ClassyMissyBackend.model.UserDetails;

@Controller
public class UserController {
	
	@Autowired
	UserDetailsDAO userDetailsDAO;
	
	@Autowired
	ProductDAO productDAO;
	/*@SuppressWarnings("unchecked")*/
@RequestMapping("/login_success")
public String loginSuccess(HttpSession session,Model m)
{
	System.out.println("----Login Sucessful----");
	
	String page=null;
	boolean loggedIn=true;
	
	//Retrieving the username
	String uname=SecurityContextHolder.getContext().getAuthentication().getName();
	session.setAttribute("username", uname);
	session.setAttribute("loggedIn",loggedIn);
	
	//Retrieving the Role
	
	Collection<GrantedAuthority> authorities = (Collection<GrantedAuthority>) SecurityContextHolder.getContext().getAuthentication().getAuthorities();
	
	for(GrantedAuthority role:authorities)
	{
		System.out.println("Role:"+role.getAuthority()+"User Name:"+uname);
		
		if(role.getAuthority().equals("ROLE_ADMIN"))
		{
			page="AdminHome";
		}
		else
		{
			List<Product> prodlist=productDAO.getProductDetails();
			m.addAttribute("prodlist",prodlist);
			page="UserHome";
		}
	}
	return "AdminHome";
}


@RequestMapping(value="/InsertUserDetails",method=RequestMethod.POST)
public String insertUserDetails(@ModelAttribute("userdetails") UserDetails userDetails,Model m)
{
	System.out.println("---User Inserted---");
	userDetailsDAO.insertUpdateUserDetails(userDetails);
		
	
	List<UserDetails> userlist=userDetailsDAO.getUserDetails();
	m.addAttribute("userlist", userlist);
	return "UserDetails";
}
}
/*String page="";
	String role="ROLE_USER";
	for (GrantedAuthority authority:authorities) 
	{
	 System.out.println(authority.getAuthority());
	     if (authority.getAuthority().equals(role)) 
	     {
	    	 
	    	 session.setAttribute("UserLoggedIn", "true");
	    	 session.setAttribute("Username", uname);
	    	 page="FullProduct";
	    	 ArrayList list=(ArrayList)pdao.showProduct();
	    	 
	    	 Gson gson = new Gson();
	    	 String jsonInString=gson.toJson(list);
	    	 m.addAttribute("list",jsonInString);
	    	 ArrayList<Cart> cartitem=new ArrayList<Cart>();
	    	 session.setAttribute("mycart", cartitem);
	    	 
	    	 break;
	     }
	     else 
	     {
	    	 session.setAttribute("LoggedIn", "true");
	    	 session.setAttribute("Administrator", "true");
	    	 page="Admin";
	    	 break;
	    }
	}
	return page;
}*/
	
	
	
	


